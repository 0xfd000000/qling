Qling, the Qt interface for cling
=================================

This is a simple Qt interface for cling, the llvm-based C++ interpreter

This is at a very early stage and definitely needs some love.
At the moment you need to hack some stuff into source files to get it to compile and run correctly, see Compiling...


Compiling
==========

First you need to install llvm, clang and cling from SVN. Follow the instructions at
http://root.cern.ch/drupal/content/cling-build-instructions

Install it to some folder, either system wide or somewhere in your home (speficy via the --prefix option to llvm's configure-script).

First you need to enter the the directory qt-hack and compile qatomic_sun.s (see Notes for explanation):

	$ cd qt-hack
	$ as qatomic_sun.s -o qatomic_sun.o
	$ cd ..

After you've done this:

	$ export LLVM_DIR=/dir/that/you/specified/as/llvm/install/prefix
	$ qmake
	$ make

and

	$ ./qling

to start


Usage
=====

Qling's main window consists of a text area that displays the code entered so far, a line edit for entering code line by line and a console-output. Enter the following example snippets at the line edit line by line:

1) Hello, world!

	#include <iostream>
	std::cout<<"Hello, world!"<<std::endl;


2) qling's main window is made available to the interpreter as "MainWindow& gui". Of course MainWindow inherits QWidget. So the simplest example is closing qling:

	gui.close();


3) Create a simple widget:

	QWidget w;
	w.show();
	w.setWindowTitle("Hello, interpreted C++ World");


4) Create a dock-widget in qling's main window:

	#include <QLabel>
	#include <QDockWidget>
	QLabel* label=new QLabel("TestDock-content");
	QDockWidget* dynDock=new QDockWidget;
	dynDock->setWidget(label);
	dynDock->setWindowTitle("DynDock");
	gui.addDockWidget(Qt::RightDockWidgetArea,dynDock);
	//your qling window should now have an additional dock
	//let's undock it:
	dynDock->setFloating(true);
	//and dock it again:
	dynDock->setFloating(false);



Notes
=====

At the moment, llvm's JIT does not support inline assembler, which is needed for Qt's atomic stuff. For this reason there is a folder qt-hack, which includes modified qatomic-headers that #ifdef the inline asm away and cause the compiler to use the non-inline functions provided by qatomic_sun.s instead.
These inline-asm issues likely cause other libraries that you might want to use from within cling to make the app crash, as well. An example is Eigen3 - I do have a patched version of Eigen3, too but there is a more elegant way to go:
Recently the "MC framework" has been included in llvm and MC's JIT does support inline assembly. Unfortunately cling needs to be patched to make use of that and I have not yet been successful in making this work correctly - it segfaults atm which seems to be some JIT-memory-manager issue that I have yet to figure out. I have only spent ~1hour on this and then given up due to lack of time.




Have fun!

